// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dequantize_nf4_q2_6_dequantize_nf4_q2_6_Pipeline_VITIS_LOOP_87_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_buf_load,
        weights_buf_1_load,
        weights_buf_2_load,
        weights_buf_3_load,
        weights_buf_4_load,
        weights_buf_5_load,
        weights_buf_6_load,
        weights_buf_7_load,
        weights_buf_8_load,
        weights_buf_9_load,
        weights_buf_10_load,
        weights_buf_11_load,
        weights_buf_12_load,
        weights_buf_13_load,
        weights_buf_14_load,
        weights_buf_15_load,
        weights_buf_16_load,
        weights_buf_17_load,
        weights_buf_18_load,
        weights_buf_19_load,
        weights_buf_20_load,
        weights_buf_21_load,
        weights_buf_22_load,
        weights_buf_23_load,
        weights_buf_24_load,
        weights_buf_25_load,
        weights_buf_26_load,
        weights_buf_27_load,
        weights_buf_28_load,
        weights_buf_29_load,
        weights_buf_30_load,
        weights_buf_31_load,
        out_index,
        sext_ln58,
        lookup_values_address0,
        lookup_values_ce0,
        lookup_values_q0,
        sext_ln100_2,
        DQ_bram,
        DQ_bram_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] weights_buf_load;
input  [7:0] weights_buf_1_load;
input  [7:0] weights_buf_2_load;
input  [7:0] weights_buf_3_load;
input  [7:0] weights_buf_4_load;
input  [7:0] weights_buf_5_load;
input  [7:0] weights_buf_6_load;
input  [7:0] weights_buf_7_load;
input  [7:0] weights_buf_8_load;
input  [7:0] weights_buf_9_load;
input  [7:0] weights_buf_10_load;
input  [7:0] weights_buf_11_load;
input  [7:0] weights_buf_12_load;
input  [7:0] weights_buf_13_load;
input  [7:0] weights_buf_14_load;
input  [7:0] weights_buf_15_load;
input  [7:0] weights_buf_16_load;
input  [7:0] weights_buf_17_load;
input  [7:0] weights_buf_18_load;
input  [7:0] weights_buf_19_load;
input  [7:0] weights_buf_20_load;
input  [7:0] weights_buf_21_load;
input  [7:0] weights_buf_22_load;
input  [7:0] weights_buf_23_load;
input  [7:0] weights_buf_24_load;
input  [7:0] weights_buf_25_load;
input  [7:0] weights_buf_26_load;
input  [7:0] weights_buf_27_load;
input  [7:0] weights_buf_28_load;
input  [7:0] weights_buf_29_load;
input  [7:0] weights_buf_30_load;
input  [7:0] weights_buf_31_load;
input  [38:0] out_index;
input  [31:0] sext_ln58;
output  [3:0] lookup_values_address0;
output   lookup_values_ce0;
input  [7:0] lookup_values_q0;
input  [7:0] sext_ln100_2;
output  [7:0] DQ_bram;
output   DQ_bram_ap_vld;

reg ap_idle;
reg DQ_bram_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_440_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [13:0] sext_ln100_2_cast_fu_424_p1;
reg  signed [13:0] sext_ln100_2_cast_reg_690;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln100_fu_634_p3;
reg   [3:0] select_ln100_reg_699;
wire   [0:0] or_ln87_fu_642_p2;
reg   [0:0] or_ln87_reg_704;
reg   [0:0] or_ln87_reg_704_pp0_iter1_reg;
wire   [63:0] zext_ln100_fu_659_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_190;
wire   [6:0] add_ln87_fu_648_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0_01001;
reg    lookup_values_ce0_local;
wire   [7:0] packed_fu_462_p65;
wire   [4:0] packed_fu_462_p66;
wire   [7:0] packed_fu_462_p67;
wire   [38:0] zext_ln87_fu_448_p1;
wire   [38:0] add_ln98_fu_610_p2;
wire  signed [38:0] sext_ln58_cast_fu_428_p1;
wire   [38:0] add_ln100_fu_622_p2;
wire   [0:0] icmp_ln100_fu_628_p2;
wire   [3:0] q1_fu_602_p3;
wire   [3:0] q0_fu_598_p1;
wire   [0:0] icmp_ln98_fu_616_p2;
wire  signed [7:0] mul_ln100_fu_667_p1;
wire   [13:0] mul_ln100_fu_667_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [4:0] packed_fu_462_p1;
wire   [4:0] packed_fu_462_p3;
wire   [4:0] packed_fu_462_p5;
wire   [4:0] packed_fu_462_p7;
wire   [4:0] packed_fu_462_p9;
wire   [4:0] packed_fu_462_p11;
wire   [4:0] packed_fu_462_p13;
wire   [4:0] packed_fu_462_p15;
wire   [4:0] packed_fu_462_p17;
wire   [4:0] packed_fu_462_p19;
wire   [4:0] packed_fu_462_p21;
wire   [4:0] packed_fu_462_p23;
wire   [4:0] packed_fu_462_p25;
wire   [4:0] packed_fu_462_p27;
wire   [4:0] packed_fu_462_p29;
wire   [4:0] packed_fu_462_p31;
wire  signed [4:0] packed_fu_462_p33;
wire  signed [4:0] packed_fu_462_p35;
wire  signed [4:0] packed_fu_462_p37;
wire  signed [4:0] packed_fu_462_p39;
wire  signed [4:0] packed_fu_462_p41;
wire  signed [4:0] packed_fu_462_p43;
wire  signed [4:0] packed_fu_462_p45;
wire  signed [4:0] packed_fu_462_p47;
wire  signed [4:0] packed_fu_462_p49;
wire  signed [4:0] packed_fu_462_p51;
wire  signed [4:0] packed_fu_462_p53;
wire  signed [4:0] packed_fu_462_p55;
wire  signed [4:0] packed_fu_462_p57;
wire  signed [4:0] packed_fu_462_p59;
wire  signed [4:0] packed_fu_462_p61;
wire  signed [4:0] packed_fu_462_p63;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_190 = 7'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) dequantize_nf4_q2_6_sparsemux_65_5_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 8 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 8 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 8 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 8 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 8 ),
    .CASE20( 5'h14 ),
    .din20_WIDTH( 8 ),
    .CASE21( 5'h15 ),
    .din21_WIDTH( 8 ),
    .CASE22( 5'h16 ),
    .din22_WIDTH( 8 ),
    .CASE23( 5'h17 ),
    .din23_WIDTH( 8 ),
    .CASE24( 5'h18 ),
    .din24_WIDTH( 8 ),
    .CASE25( 5'h19 ),
    .din25_WIDTH( 8 ),
    .CASE26( 5'h1A ),
    .din26_WIDTH( 8 ),
    .CASE27( 5'h1B ),
    .din27_WIDTH( 8 ),
    .CASE28( 5'h1C ),
    .din28_WIDTH( 8 ),
    .CASE29( 5'h1D ),
    .din29_WIDTH( 8 ),
    .CASE30( 5'h1E ),
    .din30_WIDTH( 8 ),
    .CASE31( 5'h1F ),
    .din31_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
sparsemux_65_5_8_1_1_U581(
    .din0(weights_buf_load),
    .din1(weights_buf_1_load),
    .din2(weights_buf_2_load),
    .din3(weights_buf_3_load),
    .din4(weights_buf_4_load),
    .din5(weights_buf_5_load),
    .din6(weights_buf_6_load),
    .din7(weights_buf_7_load),
    .din8(weights_buf_8_load),
    .din9(weights_buf_9_load),
    .din10(weights_buf_10_load),
    .din11(weights_buf_11_load),
    .din12(weights_buf_12_load),
    .din13(weights_buf_13_load),
    .din14(weights_buf_14_load),
    .din15(weights_buf_15_load),
    .din16(weights_buf_16_load),
    .din17(weights_buf_17_load),
    .din18(weights_buf_18_load),
    .din19(weights_buf_19_load),
    .din20(weights_buf_20_load),
    .din21(weights_buf_21_load),
    .din22(weights_buf_22_load),
    .din23(weights_buf_23_load),
    .din24(weights_buf_24_load),
    .din25(weights_buf_25_load),
    .din26(weights_buf_26_load),
    .din27(weights_buf_27_load),
    .din28(weights_buf_28_load),
    .din29(weights_buf_29_load),
    .din30(weights_buf_30_load),
    .din31(weights_buf_31_load),
    .def(packed_fu_462_p65),
    .sel(packed_fu_462_p66),
    .dout(packed_fu_462_p67)
);

dequantize_nf4_q2_6_mul_8s_8s_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_8s_8s_14_1_1_U582(
    .din0(lookup_values_q0),
    .din1(mul_ln100_fu_667_p1),
    .dout(mul_ln100_fu_667_p2)
);

dequantize_nf4_q2_6_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_440_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_190 <= add_ln87_fu_648_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_190 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        or_ln87_reg_704 <= or_ln87_fu_642_p2;
        or_ln87_reg_704_pp0_iter1_reg <= or_ln87_reg_704;
        select_ln100_reg_699 <= select_ln100_fu_634_p3;
        sext_ln100_2_cast_reg_690 <= sext_ln100_2_cast_fu_424_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln87_reg_704_pp0_iter1_reg == 1'd1))) begin
        DQ_bram_ap_vld = 1'b1;
    end else begin
        DQ_bram_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_440_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_190;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lookup_values_ce0_local = 1'b1;
    end else begin
        lookup_values_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DQ_bram = {{mul_ln100_fu_667_p2[13:6]}};

assign add_ln100_fu_622_p2 = (add_ln98_fu_610_p2 + 39'd1);

assign add_ln87_fu_648_p2 = (ap_sig_allocacmp_i_2 + 7'd2);

assign add_ln98_fu_610_p2 = (zext_ln87_fu_448_p1 + out_index);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln100_fu_628_p2 = (($signed(add_ln100_fu_622_p2) < $signed(sext_ln58_cast_fu_428_p1)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_616_p2 = (($signed(add_ln98_fu_610_p2) < $signed(sext_ln58_cast_fu_428_p1)) ? 1'b1 : 1'b0);

assign lookup_values_address0 = zext_ln100_fu_659_p1;

assign lookup_values_ce0 = lookup_values_ce0_local;

assign mul_ln100_fu_667_p1 = sext_ln100_2_cast_reg_690;

assign or_ln87_fu_642_p2 = (icmp_ln98_fu_616_p2 | icmp_ln100_fu_628_p2);

assign packed_fu_462_p65 = 'bx;

assign packed_fu_462_p66 = {{ap_sig_allocacmp_i_2[5:1]}};

assign q0_fu_598_p1 = packed_fu_462_p67[3:0];

assign q1_fu_602_p3 = {{packed_fu_462_p67[7:4]}};

assign select_ln100_fu_634_p3 = ((icmp_ln100_fu_628_p2[0:0] == 1'b1) ? q1_fu_602_p3 : q0_fu_598_p1);

assign sext_ln100_2_cast_fu_424_p1 = $signed(sext_ln100_2);

assign sext_ln58_cast_fu_428_p1 = $signed(sext_ln58);

assign tmp_fu_440_p3 = ap_sig_allocacmp_i_2[32'd6];

assign zext_ln100_fu_659_p1 = select_ln100_reg_699;

assign zext_ln87_fu_448_p1 = ap_sig_allocacmp_i_2;

endmodule //dequantize_nf4_q2_6_dequantize_nf4_q2_6_Pipeline_VITIS_LOOP_87_5
