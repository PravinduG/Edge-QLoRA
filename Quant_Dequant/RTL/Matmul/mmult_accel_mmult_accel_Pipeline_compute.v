// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_accel_mmult_accel_Pipeline_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        localC,
        localC_1,
        localC_2,
        localC_3,
        localC_4,
        localC_5,
        localC_6,
        localC_7,
        localC_8,
        localC_9,
        localC_10,
        localC_11,
        localC_12,
        localC_13,
        localC_14,
        localC_15,
        localA_16_reload,
        localA_17_reload,
        localA_18_reload,
        localA_19_reload,
        localB_16_reload,
        localB_20_reload,
        localB_24_reload,
        localB_28_reload,
        localB_17_reload,
        localB_21_reload,
        localB_25_reload,
        localB_29_reload,
        localB_18_reload,
        localB_22_reload,
        localB_26_reload,
        localB_30_reload,
        localB_19_reload,
        localB_23_reload,
        localB_27_reload,
        localB_31_reload,
        localA_20_reload,
        localA_21_reload,
        localA_22_reload,
        localA_23_reload,
        localA_24_reload,
        localA_25_reload,
        localA_26_reload,
        localA_27_reload,
        localA_28_reload,
        localA_29_reload,
        localA_30_reload,
        localA_31_reload,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        p_out12,
        p_out12_ap_vld,
        p_out13,
        p_out13_ap_vld,
        p_out14,
        p_out14_ap_vld,
        add22186_out,
        add22186_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] localC;
input  [63:0] localC_1;
input  [63:0] localC_2;
input  [63:0] localC_3;
input  [63:0] localC_4;
input  [63:0] localC_5;
input  [63:0] localC_6;
input  [63:0] localC_7;
input  [63:0] localC_8;
input  [63:0] localC_9;
input  [63:0] localC_10;
input  [63:0] localC_11;
input  [63:0] localC_12;
input  [63:0] localC_13;
input  [63:0] localC_14;
input  [63:0] localC_15;
input  [63:0] localA_16_reload;
input  [63:0] localA_17_reload;
input  [63:0] localA_18_reload;
input  [63:0] localA_19_reload;
input  [63:0] localB_16_reload;
input  [63:0] localB_20_reload;
input  [63:0] localB_24_reload;
input  [63:0] localB_28_reload;
input  [63:0] localB_17_reload;
input  [63:0] localB_21_reload;
input  [63:0] localB_25_reload;
input  [63:0] localB_29_reload;
input  [63:0] localB_18_reload;
input  [63:0] localB_22_reload;
input  [63:0] localB_26_reload;
input  [63:0] localB_30_reload;
input  [63:0] localB_19_reload;
input  [63:0] localB_23_reload;
input  [63:0] localB_27_reload;
input  [63:0] localB_31_reload;
input  [63:0] localA_20_reload;
input  [63:0] localA_21_reload;
input  [63:0] localA_22_reload;
input  [63:0] localA_23_reload;
input  [63:0] localA_24_reload;
input  [63:0] localA_25_reload;
input  [63:0] localA_26_reload;
input  [63:0] localA_27_reload;
input  [63:0] localA_28_reload;
input  [63:0] localA_29_reload;
input  [63:0] localA_30_reload;
input  [63:0] localA_31_reload;
output  [63:0] p_out;
output   p_out_ap_vld;
output  [63:0] p_out1;
output   p_out1_ap_vld;
output  [63:0] p_out2;
output   p_out2_ap_vld;
output  [63:0] p_out3;
output   p_out3_ap_vld;
output  [63:0] p_out4;
output   p_out4_ap_vld;
output  [63:0] p_out5;
output   p_out5_ap_vld;
output  [63:0] p_out6;
output   p_out6_ap_vld;
output  [63:0] p_out7;
output   p_out7_ap_vld;
output  [63:0] p_out8;
output   p_out8_ap_vld;
output  [63:0] p_out9;
output   p_out9_ap_vld;
output  [63:0] p_out10;
output   p_out10_ap_vld;
output  [63:0] p_out11;
output   p_out11_ap_vld;
output  [63:0] p_out12;
output   p_out12_ap_vld;
output  [63:0] p_out13;
output   p_out13_ap_vld;
output  [63:0] p_out14;
output   p_out14_ap_vld;
output  [63:0] add22186_out;
output   add22186_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg p_out12_ap_vld;
reg p_out13_ap_vld;
reg p_out14_ap_vld;
reg add22186_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln285_fu_786_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln285_reg_1406;
reg   [0:0] icmp_ln285_reg_1406_pp0_iter1_reg;
reg   [0:0] icmp_ln285_reg_1406_pp0_iter2_reg;
reg   [0:0] icmp_ln285_reg_1406_pp0_iter3_reg;
reg   [0:0] icmp_ln285_reg_1406_pp0_iter4_reg;
wire  signed [63:0] a_val_fu_802_p11;
reg  signed [63:0] a_val_reg_1410;
wire  signed [63:0] b_val_fu_826_p11;
reg  signed [63:0] b_val_reg_1418;
wire  signed [63:0] b_val_1_fu_850_p11;
reg  signed [63:0] b_val_1_reg_1426;
wire  signed [63:0] b_val_2_fu_874_p11;
reg  signed [63:0] b_val_2_reg_1434;
wire  signed [63:0] b_val_3_fu_898_p11;
reg  signed [63:0] b_val_3_reg_1442;
wire  signed [63:0] a_val_1_fu_922_p11;
reg  signed [63:0] a_val_1_reg_1450;
wire  signed [63:0] a_val_2_fu_946_p11;
reg  signed [63:0] a_val_2_reg_1458;
wire  signed [63:0] a_val_3_fu_970_p11;
reg  signed [63:0] a_val_3_reg_1466;
wire   [63:0] grp_fu_634_p2;
reg   [63:0] mul_ln295_reg_1474;
wire   [63:0] grp_fu_638_p2;
reg   [63:0] mul_ln295_1_reg_1479;
wire   [63:0] grp_fu_642_p2;
reg   [63:0] mul_ln295_2_reg_1484;
wire   [63:0] grp_fu_646_p2;
reg   [63:0] mul_ln295_3_reg_1489;
wire   [63:0] grp_fu_650_p2;
reg   [63:0] mul_ln295_4_reg_1494;
wire   [63:0] grp_fu_654_p2;
reg   [63:0] mul_ln295_5_reg_1499;
wire   [63:0] grp_fu_658_p2;
reg   [63:0] mul_ln295_6_reg_1504;
wire   [63:0] grp_fu_662_p2;
reg   [63:0] mul_ln295_7_reg_1509;
wire   [63:0] grp_fu_666_p2;
reg   [63:0] mul_ln295_8_reg_1514;
wire   [63:0] grp_fu_670_p2;
reg   [63:0] mul_ln295_9_reg_1519;
wire   [63:0] grp_fu_674_p2;
reg   [63:0] mul_ln295_10_reg_1524;
wire   [63:0] grp_fu_678_p2;
reg   [63:0] mul_ln295_11_reg_1529;
wire   [63:0] grp_fu_682_p2;
reg   [63:0] mul_ln295_12_reg_1534;
wire   [63:0] grp_fu_686_p2;
reg   [63:0] mul_ln295_13_reg_1539;
wire   [63:0] grp_fu_690_p2;
reg   [63:0] mul_ln295_14_reg_1544;
wire   [63:0] grp_fu_694_p2;
reg   [63:0] mul_ln295_15_reg_1549;
reg   [63:0] add22186_fu_166;
wire   [63:0] add_ln295_fu_1047_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [63:0] empty_fu_170;
wire   [63:0] add_ln295_1_fu_1052_p2;
reg   [63:0] empty_24_fu_174;
wire   [63:0] add_ln295_2_fu_1057_p2;
reg   [63:0] empty_25_fu_178;
wire   [63:0] add_ln295_3_fu_1062_p2;
reg   [63:0] empty_26_fu_182;
wire   [63:0] add_ln295_4_fu_1067_p2;
reg   [63:0] empty_27_fu_186;
wire   [63:0] add_ln295_5_fu_1072_p2;
reg   [63:0] empty_28_fu_190;
wire   [63:0] add_ln295_6_fu_1077_p2;
reg   [63:0] empty_29_fu_194;
wire   [63:0] add_ln295_7_fu_1082_p2;
reg   [63:0] empty_30_fu_198;
wire   [63:0] add_ln295_8_fu_1087_p2;
reg   [63:0] empty_31_fu_202;
wire   [63:0] add_ln295_9_fu_1092_p2;
reg   [63:0] empty_32_fu_206;
wire   [63:0] add_ln295_10_fu_1097_p2;
reg   [63:0] empty_33_fu_210;
wire   [63:0] add_ln295_11_fu_1102_p2;
reg   [63:0] empty_34_fu_214;
wire   [63:0] add_ln295_12_fu_1107_p2;
reg   [63:0] empty_35_fu_218;
wire   [63:0] add_ln295_13_fu_1112_p2;
reg   [63:0] empty_36_fu_222;
wire   [63:0] add_ln295_14_fu_1117_p2;
reg   [63:0] empty_37_fu_226;
wire   [63:0] add_ln295_15_fu_1122_p2;
reg   [2:0] kk_fu_230;
wire   [2:0] add_ln285_fu_792_p2;
reg   [2:0] ap_sig_allocacmp_kk_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] a_val_fu_802_p9;
wire   [1:0] trunc_ln285_fu_798_p1;
wire   [63:0] b_val_fu_826_p9;
wire   [63:0] b_val_1_fu_850_p9;
wire   [63:0] b_val_2_fu_874_p9;
wire   [63:0] b_val_3_fu_898_p9;
wire   [63:0] a_val_1_fu_922_p9;
wire   [63:0] a_val_2_fu_946_p9;
wire   [63:0] a_val_3_fu_970_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] a_val_fu_802_p1;
wire   [1:0] a_val_fu_802_p3;
wire  signed [1:0] a_val_fu_802_p5;
wire  signed [1:0] a_val_fu_802_p7;
wire   [1:0] b_val_fu_826_p1;
wire   [1:0] b_val_fu_826_p3;
wire  signed [1:0] b_val_fu_826_p5;
wire  signed [1:0] b_val_fu_826_p7;
wire   [1:0] b_val_1_fu_850_p1;
wire   [1:0] b_val_1_fu_850_p3;
wire  signed [1:0] b_val_1_fu_850_p5;
wire  signed [1:0] b_val_1_fu_850_p7;
wire   [1:0] b_val_2_fu_874_p1;
wire   [1:0] b_val_2_fu_874_p3;
wire  signed [1:0] b_val_2_fu_874_p5;
wire  signed [1:0] b_val_2_fu_874_p7;
wire   [1:0] b_val_3_fu_898_p1;
wire   [1:0] b_val_3_fu_898_p3;
wire  signed [1:0] b_val_3_fu_898_p5;
wire  signed [1:0] b_val_3_fu_898_p7;
wire   [1:0] a_val_1_fu_922_p1;
wire   [1:0] a_val_1_fu_922_p3;
wire  signed [1:0] a_val_1_fu_922_p5;
wire  signed [1:0] a_val_1_fu_922_p7;
wire   [1:0] a_val_2_fu_946_p1;
wire   [1:0] a_val_2_fu_946_p3;
wire  signed [1:0] a_val_2_fu_946_p5;
wire  signed [1:0] a_val_2_fu_946_p7;
wire   [1:0] a_val_3_fu_970_p1;
wire   [1:0] a_val_3_fu_970_p3;
wire  signed [1:0] a_val_3_fu_970_p5;
wire  signed [1:0] a_val_3_fu_970_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 add22186_fu_166 = 64'd0;
#0 empty_fu_170 = 64'd0;
#0 empty_24_fu_174 = 64'd0;
#0 empty_25_fu_178 = 64'd0;
#0 empty_26_fu_182 = 64'd0;
#0 empty_27_fu_186 = 64'd0;
#0 empty_28_fu_190 = 64'd0;
#0 empty_29_fu_194 = 64'd0;
#0 empty_30_fu_198 = 64'd0;
#0 empty_31_fu_202 = 64'd0;
#0 empty_32_fu_206 = 64'd0;
#0 empty_33_fu_210 = 64'd0;
#0 empty_34_fu_214 = 64'd0;
#0 empty_35_fu_218 = 64'd0;
#0 empty_36_fu_222 = 64'd0;
#0 empty_37_fu_226 = 64'd0;
#0 kk_fu_230 = 3'd0;
#0 ap_done_reg = 1'b0;
end

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_val_reg_1418),
    .din1(a_val_reg_1410),
    .ce(1'b1),
    .dout(grp_fu_634_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_val_1_reg_1426),
    .din1(a_val_reg_1410),
    .ce(1'b1),
    .dout(grp_fu_638_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_val_2_reg_1434),
    .din1(a_val_reg_1410),
    .ce(1'b1),
    .dout(grp_fu_642_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_val_3_reg_1442),
    .din1(a_val_reg_1410),
    .ce(1'b1),
    .dout(grp_fu_646_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_1_reg_1450),
    .din1(b_val_reg_1418),
    .ce(1'b1),
    .dout(grp_fu_650_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_1_reg_1450),
    .din1(b_val_1_reg_1426),
    .ce(1'b1),
    .dout(grp_fu_654_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_1_reg_1450),
    .din1(b_val_2_reg_1434),
    .ce(1'b1),
    .dout(grp_fu_658_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_1_reg_1450),
    .din1(b_val_3_reg_1442),
    .ce(1'b1),
    .dout(grp_fu_662_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_2_reg_1458),
    .din1(b_val_reg_1418),
    .ce(1'b1),
    .dout(grp_fu_666_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_2_reg_1458),
    .din1(b_val_1_reg_1426),
    .ce(1'b1),
    .dout(grp_fu_670_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_2_reg_1458),
    .din1(b_val_2_reg_1434),
    .ce(1'b1),
    .dout(grp_fu_674_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_2_reg_1458),
    .din1(b_val_3_reg_1442),
    .ce(1'b1),
    .dout(grp_fu_678_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_3_reg_1466),
    .din1(b_val_reg_1418),
    .ce(1'b1),
    .dout(grp_fu_682_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_3_reg_1466),
    .din1(b_val_1_reg_1426),
    .ce(1'b1),
    .dout(grp_fu_686_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_3_reg_1466),
    .din1(b_val_2_reg_1434),
    .ce(1'b1),
    .dout(grp_fu_690_p2)
);

mmult_accel_mul_64s_64s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mul_64s_64s_64_5_1_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_val_3_reg_1466),
    .din1(b_val_3_reg_1442),
    .ce(1'b1),
    .dout(grp_fu_694_p2)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U99(
    .din0(localA_16_reload),
    .din1(localA_17_reload),
    .din2(localA_18_reload),
    .din3(localA_19_reload),
    .def(a_val_fu_802_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(a_val_fu_802_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U100(
    .din0(localB_16_reload),
    .din1(localB_20_reload),
    .din2(localB_24_reload),
    .din3(localB_28_reload),
    .def(b_val_fu_826_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(b_val_fu_826_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U101(
    .din0(localB_17_reload),
    .din1(localB_21_reload),
    .din2(localB_25_reload),
    .din3(localB_29_reload),
    .def(b_val_1_fu_850_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(b_val_1_fu_850_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U102(
    .din0(localB_18_reload),
    .din1(localB_22_reload),
    .din2(localB_26_reload),
    .din3(localB_30_reload),
    .def(b_val_2_fu_874_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(b_val_2_fu_874_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U103(
    .din0(localB_19_reload),
    .din1(localB_23_reload),
    .din2(localB_27_reload),
    .din3(localB_31_reload),
    .def(b_val_3_fu_898_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(b_val_3_fu_898_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U104(
    .din0(localA_20_reload),
    .din1(localA_21_reload),
    .din2(localA_22_reload),
    .din3(localA_23_reload),
    .def(a_val_1_fu_922_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(a_val_1_fu_922_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U105(
    .din0(localA_24_reload),
    .din1(localA_25_reload),
    .din2(localA_26_reload),
    .din3(localA_27_reload),
    .def(a_val_2_fu_946_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(a_val_2_fu_946_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U106(
    .din0(localA_28_reload),
    .din1(localA_29_reload),
    .din2(localA_30_reload),
    .din3(localA_31_reload),
    .def(a_val_3_fu_970_p9),
    .sel(trunc_ln285_fu_798_p1),
    .dout(a_val_3_fu_970_p11)
);

mmult_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add22186_fu_166 <= localC_15;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            add22186_fu_166 <= add_ln295_fu_1047_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_24_fu_174 <= localC_13;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_24_fu_174 <= add_ln295_2_fu_1057_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_25_fu_178 <= localC_12;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_25_fu_178 <= add_ln295_3_fu_1062_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_26_fu_182 <= localC_11;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_26_fu_182 <= add_ln295_4_fu_1067_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_27_fu_186 <= localC_10;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_27_fu_186 <= add_ln295_5_fu_1072_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_28_fu_190 <= localC_9;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_28_fu_190 <= add_ln295_6_fu_1077_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_29_fu_194 <= localC_8;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_29_fu_194 <= add_ln295_7_fu_1082_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_30_fu_198 <= localC_7;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_30_fu_198 <= add_ln295_8_fu_1087_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_31_fu_202 <= localC_6;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_31_fu_202 <= add_ln295_9_fu_1092_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_32_fu_206 <= localC_5;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_32_fu_206 <= add_ln295_10_fu_1097_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_33_fu_210 <= localC_4;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_33_fu_210 <= add_ln295_11_fu_1102_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_34_fu_214 <= localC_3;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_34_fu_214 <= add_ln295_12_fu_1107_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_35_fu_218 <= localC_2;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_35_fu_218 <= add_ln295_13_fu_1112_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_36_fu_222 <= localC_1;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_36_fu_222 <= add_ln295_14_fu_1117_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_37_fu_226 <= localC;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_37_fu_226 <= add_ln295_15_fu_1122_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_170 <= localC_14;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_fu_170 <= add_ln295_1_fu_1052_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln285_fu_786_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            kk_fu_230 <= add_ln285_fu_792_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            kk_fu_230 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_val_1_reg_1450 <= a_val_1_fu_922_p11;
        a_val_2_reg_1458 <= a_val_2_fu_946_p11;
        a_val_3_reg_1466 <= a_val_3_fu_970_p11;
        a_val_reg_1410 <= a_val_fu_802_p11;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        b_val_1_reg_1426 <= b_val_1_fu_850_p11;
        b_val_2_reg_1434 <= b_val_2_fu_874_p11;
        b_val_3_reg_1442 <= b_val_3_fu_898_p11;
        b_val_reg_1418 <= b_val_fu_826_p11;
        icmp_ln285_reg_1406 <= icmp_ln285_fu_786_p2;
        icmp_ln285_reg_1406_pp0_iter1_reg <= icmp_ln285_reg_1406;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln285_reg_1406_pp0_iter2_reg <= icmp_ln285_reg_1406_pp0_iter1_reg;
        icmp_ln285_reg_1406_pp0_iter3_reg <= icmp_ln285_reg_1406_pp0_iter2_reg;
        icmp_ln285_reg_1406_pp0_iter4_reg <= icmp_ln285_reg_1406_pp0_iter3_reg;
        mul_ln295_10_reg_1524 <= grp_fu_674_p2;
        mul_ln295_11_reg_1529 <= grp_fu_678_p2;
        mul_ln295_12_reg_1534 <= grp_fu_682_p2;
        mul_ln295_13_reg_1539 <= grp_fu_686_p2;
        mul_ln295_14_reg_1544 <= grp_fu_690_p2;
        mul_ln295_15_reg_1549 <= grp_fu_694_p2;
        mul_ln295_1_reg_1479 <= grp_fu_638_p2;
        mul_ln295_2_reg_1484 <= grp_fu_642_p2;
        mul_ln295_3_reg_1489 <= grp_fu_646_p2;
        mul_ln295_4_reg_1494 <= grp_fu_650_p2;
        mul_ln295_5_reg_1499 <= grp_fu_654_p2;
        mul_ln295_6_reg_1504 <= grp_fu_658_p2;
        mul_ln295_7_reg_1509 <= grp_fu_662_p2;
        mul_ln295_8_reg_1514 <= grp_fu_666_p2;
        mul_ln295_9_reg_1519 <= grp_fu_670_p2;
        mul_ln295_reg_1474 <= grp_fu_634_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        add22186_out_ap_vld = 1'b1;
    end else begin
        add22186_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln285_fu_786_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_kk_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_kk_1 = kk_fu_230;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out12_ap_vld = 1'b1;
    end else begin
        p_out12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out13_ap_vld = 1'b1;
    end else begin
        p_out13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out14_ap_vld = 1'b1;
    end else begin
        p_out14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (icmp_ln285_reg_1406_pp0_iter4_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_val_1_fu_922_p9 = 'bx;

assign a_val_2_fu_946_p9 = 'bx;

assign a_val_3_fu_970_p9 = 'bx;

assign a_val_fu_802_p9 = 'bx;

assign add22186_out = add22186_fu_166;

assign add_ln285_fu_792_p2 = (ap_sig_allocacmp_kk_1 + 3'd1);

assign add_ln295_10_fu_1097_p2 = (mul_ln295_10_reg_1524 + empty_32_fu_206);

assign add_ln295_11_fu_1102_p2 = (mul_ln295_11_reg_1529 + empty_33_fu_210);

assign add_ln295_12_fu_1107_p2 = (mul_ln295_12_reg_1534 + empty_34_fu_214);

assign add_ln295_13_fu_1112_p2 = (mul_ln295_13_reg_1539 + empty_35_fu_218);

assign add_ln295_14_fu_1117_p2 = (mul_ln295_14_reg_1544 + empty_36_fu_222);

assign add_ln295_15_fu_1122_p2 = (mul_ln295_15_reg_1549 + empty_37_fu_226);

assign add_ln295_1_fu_1052_p2 = (mul_ln295_1_reg_1479 + empty_fu_170);

assign add_ln295_2_fu_1057_p2 = (mul_ln295_2_reg_1484 + empty_24_fu_174);

assign add_ln295_3_fu_1062_p2 = (mul_ln295_3_reg_1489 + empty_25_fu_178);

assign add_ln295_4_fu_1067_p2 = (mul_ln295_4_reg_1494 + empty_26_fu_182);

assign add_ln295_5_fu_1072_p2 = (mul_ln295_5_reg_1499 + empty_27_fu_186);

assign add_ln295_6_fu_1077_p2 = (mul_ln295_6_reg_1504 + empty_28_fu_190);

assign add_ln295_7_fu_1082_p2 = (mul_ln295_7_reg_1509 + empty_29_fu_194);

assign add_ln295_8_fu_1087_p2 = (mul_ln295_8_reg_1514 + empty_30_fu_198);

assign add_ln295_9_fu_1092_p2 = (mul_ln295_9_reg_1519 + empty_31_fu_202);

assign add_ln295_fu_1047_p2 = (mul_ln295_reg_1474 + add22186_fu_166);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign b_val_1_fu_850_p9 = 'bx;

assign b_val_2_fu_874_p9 = 'bx;

assign b_val_3_fu_898_p9 = 'bx;

assign b_val_fu_826_p9 = 'bx;

assign icmp_ln285_fu_786_p2 = ((ap_sig_allocacmp_kk_1 == 3'd4) ? 1'b1 : 1'b0);

assign p_out = empty_37_fu_226;

assign p_out1 = empty_36_fu_222;

assign p_out10 = empty_27_fu_186;

assign p_out11 = empty_26_fu_182;

assign p_out12 = empty_25_fu_178;

assign p_out13 = empty_24_fu_174;

assign p_out14 = empty_fu_170;

assign p_out2 = empty_35_fu_218;

assign p_out3 = empty_34_fu_214;

assign p_out4 = empty_33_fu_210;

assign p_out5 = empty_32_fu_206;

assign p_out6 = empty_31_fu_202;

assign p_out7 = empty_30_fu_198;

assign p_out8 = empty_29_fu_194;

assign p_out9 = empty_28_fu_190;

assign trunc_ln285_fu_798_p1 = ap_sig_allocacmp_kk_1[1:0];

endmodule //mmult_accel_mmult_accel_Pipeline_compute
