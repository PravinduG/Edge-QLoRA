// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_accel_mmult_accel_Pipeline_copy_A_tile_VITIS_LOOP_154_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        K,
        mul_ln141,
        A_bram_address1,
        A_bram_ce1,
        A_bram_we1,
        A_bram_d1,
        A_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] K;
input  [61:0] mul_ln141;
output  [14:0] A_bram_address1;
output   A_bram_ce1;
output   A_bram_we1;
output  [7:0] A_bram_d1;
input  [7:0] A_load;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln153_fu_117_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln153_reg_253;
wire   [14:0] select_ln153_fu_154_p3;
reg   [14:0] select_ln153_reg_257;
wire   [14:0] trunc_ln156_fu_188_p1;
reg   [14:0] trunc_ln156_reg_262;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln156_fu_212_p1;
wire    ap_block_pp0_stage0;
reg   [14:0] k_fu_52;
wire   [14:0] add_ln154_fu_192_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_56;
wire   [30:0] select_ln153_1_fu_162_p3;
reg   [61:0] indvar_flatten_fu_60;
wire   [61:0] add_ln153_1_fu_122_p2;
reg    A_bram_we1_local;
reg    A_bram_ce1_local;
wire   [31:0] zext_ln154_fu_136_p1;
wire   [0:0] icmp_ln154_fu_140_p2;
wire   [30:0] add_ln153_fu_148_p2;
wire   [30:0] shl_ln156_fu_170_p2;
wire   [30:0] shl_ln156_1_fu_176_p2;
wire   [30:0] sub_ln156_fu_182_p2;
wire   [14:0] add_ln156_fu_208_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 k_fu_52 = 15'd0;
#0 i_fu_56 = 31'd0;
#0 indvar_flatten_fu_60 = 62'd0;
#0 ap_done_reg = 1'b0;
end

mmult_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_56 <= 31'd0;
        end else if (((icmp_ln153_reg_253 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            i_fu_56 <= select_ln153_1_fu_162_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_60 <= 62'd0;
        end else if (((icmp_ln153_fu_117_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_60 <= add_ln153_1_fu_122_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_52 <= 15'd0;
        end else if (((icmp_ln153_reg_253 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            k_fu_52 <= add_ln154_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln153_reg_253 <= icmp_ln153_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        select_ln153_reg_257 <= select_ln153_fu_154_p3;
        trunc_ln156_reg_262 <= trunc_ln156_fu_188_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_bram_ce1_local = 1'b1;
    end else begin
        A_bram_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_bram_we1_local = 1'b1;
    end else begin
        A_bram_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_fu_117_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_253 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_bram_address1 = zext_ln156_fu_212_p1;

assign A_bram_ce1 = A_bram_ce1_local;

assign A_bram_d1 = A_load;

assign A_bram_we1 = A_bram_we1_local;

assign add_ln153_1_fu_122_p2 = (indvar_flatten_fu_60 + 62'd1);

assign add_ln153_fu_148_p2 = (i_fu_56 + 31'd1);

assign add_ln154_fu_192_p2 = (select_ln153_fu_154_p3 + 15'd1);

assign add_ln156_fu_208_p2 = (trunc_ln156_reg_262 + select_ln153_reg_257);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln153_fu_117_p2 = ((indvar_flatten_fu_60 == mul_ln141) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_140_p2 = (($signed(zext_ln154_fu_136_p1) < $signed(K)) ? 1'b1 : 1'b0);

assign select_ln153_1_fu_162_p3 = ((icmp_ln154_fu_140_p2[0:0] == 1'b1) ? i_fu_56 : add_ln153_fu_148_p2);

assign select_ln153_fu_154_p3 = ((icmp_ln154_fu_140_p2[0:0] == 1'b1) ? k_fu_52 : 15'd0);

assign shl_ln156_1_fu_176_p2 = select_ln153_1_fu_162_p3 << 31'd8;

assign shl_ln156_fu_170_p2 = select_ln153_1_fu_162_p3 << 31'd10;

assign sub_ln156_fu_182_p2 = (shl_ln156_fu_170_p2 - shl_ln156_1_fu_176_p2);

assign trunc_ln156_fu_188_p1 = sub_ln156_fu_182_p2[14:0];

assign zext_ln154_fu_136_p1 = k_fu_52;

assign zext_ln156_fu_212_p1 = add_ln156_fu_208_p2;

endmodule //mmult_accel_mmult_accel_Pipeline_copy_A_tile_VITIS_LOOP_154_1
