// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mmult_accel_mmult_accel_Pipeline_VITIS_LOOP_306_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        j0,
        current_block_M,
        cmp248,
        localC_15,
        localC_14,
        localC_13,
        localC_12,
        localC_11,
        localC_10,
        localC_9,
        localC_8,
        localC_7,
        localC_6,
        localC_5,
        localC_4,
        localC_3,
        localC_2,
        localC_1,
        localC,
        C_i,
        C_o,
        C_o_ap_vld,
        ii_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] j0;
input  [31:0] current_block_M;
input  [0:0] cmp248;
input  [63:0] localC_15;
input  [63:0] localC_14;
input  [63:0] localC_13;
input  [63:0] localC_12;
input  [63:0] localC_11;
input  [63:0] localC_10;
input  [63:0] localC_9;
input  [63:0] localC_8;
input  [63:0] localC_7;
input  [63:0] localC_6;
input  [63:0] localC_5;
input  [63:0] localC_4;
input  [63:0] localC_3;
input  [63:0] localC_2;
input  [63:0] localC_1;
input  [63:0] localC;
input  [63:0] C_i;
output  [63:0] C_o;
output   C_o_ap_vld;
input  [1:0] ii_1;

reg ap_idle;
reg[63:0] C_o;
reg C_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln306_fu_235_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] jj_1_reg_493;
wire   [0:0] and_ln310_fu_272_p2;
reg   [0:0] and_ln310_reg_503;
wire   [63:0] tmp_4_fu_357_p11;
reg   [63:0] tmp_4_reg_507;
reg   [2:0] jj_fu_90;
wire   [2:0] add_ln306_fu_241_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_jj_1;
wire    ap_block_pp0_stage0;
wire   [63:0] add_ln311_fu_380_p2;
wire    ap_block_pp0_stage0_01001;
wire   [30:0] zext_ln306_fu_252_p1;
wire   [30:0] add_ln309_fu_258_p2;
wire   [31:0] zext_ln310_fu_263_p1;
wire   [0:0] icmp_ln310_fu_267_p2;
wire   [63:0] tmp_fu_277_p9;
wire   [1:0] trunc_ln306_fu_255_p1;
wire   [63:0] tmp_1_fu_297_p9;
wire   [63:0] tmp_2_fu_317_p9;
wire   [63:0] tmp_3_fu_337_p9;
wire   [63:0] tmp_fu_277_p11;
wire   [63:0] tmp_1_fu_297_p11;
wire   [63:0] tmp_2_fu_317_p11;
wire   [63:0] tmp_3_fu_337_p11;
wire   [63:0] tmp_4_fu_357_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_fu_277_p1;
wire   [1:0] tmp_fu_277_p3;
wire  signed [1:0] tmp_fu_277_p5;
wire  signed [1:0] tmp_fu_277_p7;
wire   [1:0] tmp_1_fu_297_p1;
wire   [1:0] tmp_1_fu_297_p3;
wire  signed [1:0] tmp_1_fu_297_p5;
wire  signed [1:0] tmp_1_fu_297_p7;
wire   [1:0] tmp_2_fu_317_p1;
wire   [1:0] tmp_2_fu_317_p3;
wire  signed [1:0] tmp_2_fu_317_p5;
wire  signed [1:0] tmp_2_fu_317_p7;
wire   [1:0] tmp_3_fu_337_p1;
wire   [1:0] tmp_3_fu_337_p3;
wire  signed [1:0] tmp_3_fu_337_p5;
wire  signed [1:0] tmp_3_fu_337_p7;
wire   [1:0] tmp_4_fu_357_p1;
wire   [1:0] tmp_4_fu_357_p3;
wire  signed [1:0] tmp_4_fu_357_p5;
wire  signed [1:0] tmp_4_fu_357_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 jj_fu_90 = 3'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U173(
    .din0(localC_15),
    .din1(localC_14),
    .din2(localC_13),
    .din3(localC_12),
    .def(tmp_fu_277_p9),
    .sel(trunc_ln306_fu_255_p1),
    .dout(tmp_fu_277_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U174(
    .din0(localC_11),
    .din1(localC_10),
    .din2(localC_9),
    .din3(localC_8),
    .def(tmp_1_fu_297_p9),
    .sel(trunc_ln306_fu_255_p1),
    .dout(tmp_1_fu_297_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U175(
    .din0(localC_7),
    .din1(localC_6),
    .din2(localC_5),
    .din3(localC_4),
    .def(tmp_2_fu_317_p9),
    .sel(trunc_ln306_fu_255_p1),
    .dout(tmp_2_fu_317_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U176(
    .din0(localC_3),
    .din1(localC_2),
    .din2(localC_1),
    .din3(localC),
    .def(tmp_3_fu_337_p9),
    .sel(trunc_ln306_fu_255_p1),
    .dout(tmp_3_fu_337_p11)
);

(* dissolve_hierarchy = "yes" *) mmult_accel_sparsemux_9_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_9_2_64_1_1_U177(
    .din0(tmp_fu_277_p11),
    .din1(tmp_1_fu_297_p11),
    .din2(tmp_2_fu_317_p11),
    .din3(tmp_3_fu_337_p11),
    .def(tmp_4_fu_357_p9),
    .sel(ii_1),
    .dout(tmp_4_fu_357_p11)
);

mmult_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln306_fu_235_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            jj_fu_90 <= add_ln306_fu_241_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            jj_fu_90 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln310_reg_503 <= and_ln310_fu_272_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        jj_1_reg_493 <= ap_sig_allocacmp_jj_1;
        tmp_4_reg_507 <= tmp_4_fu_357_p11;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln310_reg_503) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_o = add_ln311_fu_380_p2;
    end else begin
        C_o = C_i;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln310_reg_503) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_o_ap_vld = 1'b1;
    end else begin
        C_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln306_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_jj_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_jj_1 = jj_fu_90;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln306_fu_241_p2 = (ap_sig_allocacmp_jj_1 + 3'd1);

assign add_ln309_fu_258_p2 = (zext_ln306_fu_252_p1 + j0);

assign add_ln311_fu_380_p2 = (C_i + tmp_4_reg_507);

assign and_ln310_fu_272_p2 = (icmp_ln310_fu_267_p2 & cmp248);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln306_fu_235_p2 = ((ap_sig_allocacmp_jj_1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln310_fu_267_p2 = (($signed(zext_ln310_fu_263_p1) < $signed(current_block_M)) ? 1'b1 : 1'b0);

assign tmp_1_fu_297_p9 = 'bx;

assign tmp_2_fu_317_p9 = 'bx;

assign tmp_3_fu_337_p9 = 'bx;

assign tmp_4_fu_357_p9 = 'bx;

assign tmp_fu_277_p9 = 'bx;

assign trunc_ln306_fu_255_p1 = jj_1_reg_493[1:0];

assign zext_ln306_fu_252_p1 = jj_1_reg_493;

assign zext_ln310_fu_263_p1 = add_ln309_fu_258_p2;

endmodule //mmult_accel_mmult_accel_Pipeline_VITIS_LOOP_306_10
